preferences[x,] = ratio
}
head(preferences[order(preferences[,1], decreasing = TRUE),], n = 5)
#Same as in exercise 5
liked_most = matrix(NA, ncol = 2, nrow = ncol(data_100k))
ratio = matrix(NA, ncol = 2)
new_data = data_100k[data_100k$`Forrest Gump (1994)`>=4,]
new_data = new_data[complete.cases(new_data$`Forrest Gump (1994)`),]
for(i in 2:ncol(data_100k)){
x = i-1
ratio = cbind(mean(new_data[,i], na.rm = TRUE), colnames(new_data[i]))
liked_most[x,] = ratio
}
liked_most = liked_most[liked_most[,1]!="NaN",]
head(liked_most[order(liked_most[,1], decreasing = TRUE),], n = 5)
library(reshape)
library(tidyr)
library(reshape)
library(tidyr)
critics = read.csv("C:/Users/adolf/OneDrive/Documents/IE Business School/2nd Semester/Recommendation Engines/Labs/Data/critics.csv", sep = ",")
#get the mean of each column into a matrix
means_col = matrix(colMeans(critics[-1], na.rm = TRUE))
#get the names of each column
film_col = matrix(colnames(critics[-1]))
#bind them into the same matrix
ratings = cbind(means_col,film_col)
#print top 5
head(ratings[order(ratings[,1], decreasing = TRUE),], n = 5)
#create two matrixes empty for the next for loop
percentages = matrix(NA, ncol = 2, nrow = 20)
value = matrix(NA, ncol = 2)
#for loop to bind into a matrix two columns: first one sum the number of ratings >= 4 and divide them by the total and the name of the movie where you are carrying this operation
for(i in 2:ncol(critics)){
x = i-1
value = cbind(c(sum(critics[[i]]>=4, na.rm = TRUE)/sum(critics[[i]]>0, na.rm = TRUE)),c( colnames(critics[i])))
percentages[x,] = value
}
#print top 5
head(percentages[order(percentages[,1], decreasing = TRUE),], n = 5)
#create two matrixes empty for the next for loop
nratings = matrix(NA, ncol = 2, nrow = 20)
value = matrix(NA, ncol = 2)
#for loop to bind into a matrix two columns: first one sum the total number of ratings and the name of the movie where you are carrying this operation
for(i in 2:ncol(critics)){
x = i-1
value = cbind(sum(critics[[i]]>=0, na.rm = TRUE),c(colnames(critics[i])))
nratings[x,] = value
}
#In this case we need to make it data frame to modify the number of ratings column to make it number type data and the plot the top 5
nratings = data.frame(nratings)
nratings$X1 = as.numeric(as.character(nratings$X1))
str(nratings)
head(nratings[order(nratings[,1], decreasing = TRUE),], n = 5)
#create two matrixes empty for the next for loop
preferences = matrix(NA, ncol = 2, nrow = 20)
ratio = matrix(NA, ncol = 2)
#for loop to bind into a matrix two columns: first one sum the number of ratings that "Star Wars IV: A New Hope" and the other movies coincided and the name of the movie where you are carrying this operation
for(i in 3:nrow(critics)){
x = i-1
ratio = cbind(sum((is.na(critics[[i]])==FALSE) & (is.na(critics[[2]])==FALSE), na.rm = TRUE)/sum(((is.na(critics[[2]])==FALSE))), c(colnames(critics[i])))
preferences[x,] = ratio
}
#print top 5
head(preferences[order(preferences[,1], decreasing = TRUE),], n = 5)
#create two matrixes empty for the next for loop and a new dataset with only the rows where "Babe" ratings are 4 or higher
liked_most = matrix(NA, ncol = 2, nrow = 20)
ratio = matrix(NA, ncol = 2)
new_data = critics[critics[,21]>=4,]
new_data = new_data[complete.cases(new_data[,21]),]
# in this for loop we create a two column matrix: first column with the average rate for each movie and the second with the name of the movie
for(i in 2:ncol(critics)-1){
x = i-1
ratio = cbind(mean(new_data[,i], na.rm = TRUE), colnames(new_data[i]))
liked_most[x,] = ratio
}
# print the top 5
head(liked_most[order(liked_most[,1], decreasing = TRUE),], n = 5)
# Loading the data
movies_100k = read.csv("C:/Users/adolf/OneDrive/Documents/IE Business School/2nd Semester/Recommendation Engines/Labs/Data/ml-latest-small/movies.csv", sep = ",")
ratings_100k = read.csv("C:/Users/adolf/OneDrive/Documents/IE Business School/2nd Semester/Recommendation Engines/Labs/Data/ml-latest-small/ratings.csv", sep = ",")
# Putting both databases together
data_100k = merge(ratings_100k, movies_100k, by.x = 'movieId')
#Erasing columns we dont need due to merge
data_100k$movieId = NULL
data_100k$genres = NULL
data_100k$timestamp = NULL
# We use spread function to give our data the same structure as in past exercises
data_100k = data_100k[-86634,]#repeated rating --> user rates the movie twice
data_100k = spread(data = data_100k, key = title, value = rating)
head(data_100k)
# Same as Exercise 1
means_col_100 = matrix(colMeans(data_100k[-1], na.rm = TRUE))
film_col_100 = matrix(colnames(data_100k[-1]))
ratings_100 = cbind(means_col_100,film_col_100)
head(ratings_100[order(ratings_100[,1], decreasing = TRUE),], n = 5)
# Same as exercise 2
percentages = matrix(NA, ncol = 2, nrow = ncol(data_100k))
value = matrix(NA, ncol = 2)
for(i in 2:ncol(data_100k)){
x = i-1
value = cbind(c(sum(data_100k[,i]>=4, na.rm = TRUE)/sum(data_100k[,i]>0, na.rm = TRUE)),c( colnames(data_100k[i])))
percentages[x,] = value
}
head(percentages[order(percentages[,1], decreasing = TRUE),], n = 5)
# Same as exercise 3
nratings = matrix(NA, ncol = 2, nrow = ncol(data_100k))
value = matrix(NA, ncol = 2)
for(i in 2:ncol(data_100k)){
x = i-1
value = cbind(sum(data_100k[[i]]>=0, na.rm = TRUE),c(colnames(data_100k[i])))
nratings[x,] = value
}
nratings = data.frame(nratings)
nratings$X1 = as.numeric(as.character(nratings$X1))
nratings = as.matrix(nratings)
head(nratings[order(nratings[,1], decreasing = TRUE),], n = 5)
#Same as in exercise 4
preferences = matrix(NA, ncol = 2, nrow = nrow(data_100k))
ratio = matrix(NA, ncol = 2)
for(i in 3:nrow(data_100k)){
x = i-1
ratio = cbind(sum((is.na(data_100k[[i]])==FALSE) & (is.na(data_100k[[2]])==FALSE), na.rm = TRUE)/sum(((is.na(data_100k[[2]])==FALSE))), c(colnames(data_100k[i])))
preferences[x,] = ratio
}
head(preferences[order(preferences[,1], decreasing = TRUE),], n = 5)
#Same as in exercise 5
liked_most = matrix(NA, ncol = 2, nrow = ncol(data_100k))
ratio = matrix(NA, ncol = 2)
new_data = data_100k[data_100k$`Forrest Gump (1994)`>=4,]
new_data = new_data[complete.cases(new_data$`Forrest Gump (1994)`),]
for(i in 2:ncol(data_100k)){
x = i-1
ratio = cbind(mean(new_data[,i], na.rm = TRUE), colnames(new_data[i]))
liked_most[x,] = ratio
}
liked_most = liked_most[liked_most[,1]!="NaN",]
head(liked_most[order(liked_most[,1], decreasing = TRUE),], n = 5)
library(reshape)
library(tidyr)
critics = read.csv("C:/Users/adolf/OneDrive/Documents/IE Business School/2nd Semester/Recommendation Engines/Labs/Data/critics.csv", sep = ",")
#get the mean of each column into a matrix
means_col = matrix(colMeans(critics[-1], na.rm = TRUE))
#get the names of each column
film_col = matrix(colnames(critics[-1]))
#bind them into the same matrix
ratings = cbind(means_col,film_col)
#print top 5
head(ratings[order(ratings[,1], decreasing = TRUE),], n = 5)
#create two matrixes empty for the next for loop
percentages = matrix(NA, ncol = 2, nrow = 20)
value = matrix(NA, ncol = 2)
#for loop to bind into a matrix two columns: first one sum the number of ratings >= 4 and divide them by the total and the name of the movie where you are carrying this operation
for(i in 2:ncol(critics)){
x = i-1
value = cbind(c(sum(critics[[i]]>=4, na.rm = TRUE)/sum(critics[[i]]>0, na.rm = TRUE)),c( colnames(critics[i])))
percentages[x,] = value
}
#print top 5
head(percentages[order(percentages[,1], decreasing = TRUE),], n = 5)
#create two matrixes empty for the next for loop
nratings = matrix(NA, ncol = 2, nrow = 20)
value = matrix(NA, ncol = 2)
#for loop to bind into a matrix two columns: first one sum the total number of ratings and the name of the movie where you are carrying this operation
for(i in 2:ncol(critics)){
x = i-1
value = cbind(sum(critics[[i]]>=0, na.rm = TRUE),c(colnames(critics[i])))
nratings[x,] = value
}
#In this case we need to make it data frame to modify the number of ratings column to make it number type data and the plot the top 5
nratings = data.frame(nratings)
nratings$X1 = as.numeric(as.character(nratings$X1))
str(nratings)
head(nratings[order(nratings[,1], decreasing = TRUE),], n = 5)
#create two matrixes empty for the next for loop
preferences = matrix(NA, ncol = 2, nrow = 20)
ratio = matrix(NA, ncol = 2)
#for loop to bind into a matrix two columns: first one sum the number of ratings that "Star Wars IV: A New Hope" and the other movies coincided and the name of the movie where you are carrying this operation
for(i in 3:nrow(critics)){
x = i-1
ratio = cbind(sum((is.na(critics[[i]])==FALSE) & (is.na(critics[[2]])==FALSE), na.rm = TRUE)/sum(((is.na(critics[[2]])==FALSE))), c(colnames(critics[i])))
preferences[x,] = ratio
}
#print top 5
head(preferences[order(preferences[,1], decreasing = TRUE),], n = 5)
#create two matrixes empty for the next for loop and a new dataset with only the rows where "Babe" ratings are 4 or higher
liked_most = matrix(NA, ncol = 2, nrow = 20)
ratio = matrix(NA, ncol = 2)
new_data = critics[critics[,21]>=4,]
new_data = new_data[complete.cases(new_data[,21]),]
# in this for loop we create a two column matrix: first column with the average rate for each movie and the second with the name of the movie
for(i in 2:ncol(critics)-1){
x = i-1
ratio = cbind(mean(new_data[,i], na.rm = TRUE), colnames(new_data[i]))
liked_most[x,] = ratio
}
# print the top 5
head(liked_most[order(liked_most[,1], decreasing = TRUE),], n = 5)
# Loading the data
movies_100k = read.csv("C:/Users/adolf/OneDrive/Documents/IE Business School/2nd Semester/Recommendation Engines/Labs/Data/ml-latest-small/movies.csv", sep = ",")
ratings_100k = read.csv("C:/Users/adolf/OneDrive/Documents/IE Business School/2nd Semester/Recommendation Engines/Labs/Data/ml-latest-small/ratings.csv", sep = ",")
# Putting both databases together
data_100k = merge(ratings_100k, movies_100k, by.x = 'movieId')
#Erasing columns we dont need due to merge
data_100k$movieId = NULL
data_100k$genres = NULL
data_100k$timestamp = NULL
# We use spread function to give our data the same structure as in past exercises
data_100k = data_100k[-86634,]#repeated rating --> user rates the movie twice
data_100k = spread(data = data_100k, key = title, value = rating)
head(data_100k)
# Same as Exercise 1
means_col_100 = matrix(colMeans(data_100k[-1], na.rm = TRUE))
film_col_100 = matrix(colnames(data_100k[-1]))
ratings_100 = cbind(means_col_100,film_col_100)
head(ratings_100[order(ratings_100[,1], decreasing = TRUE),], n = 5)
# Same as exercise 2
percentages = matrix(NA, ncol = 2, nrow = ncol(data_100k))
value = matrix(NA, ncol = 2)
for(i in 2:ncol(data_100k)){
x = i-1
value = cbind(c(sum(data_100k[,i]>=4, na.rm = TRUE)/sum(data_100k[,i]>0, na.rm = TRUE)),c( colnames(data_100k[i])))
percentages[x,] = value
}
head(percentages[order(percentages[,1], decreasing = TRUE),], n = 5)
# Same as exercise 3
nratings = matrix(NA, ncol = 2, nrow = ncol(data_100k))
value = matrix(NA, ncol = 2)
for(i in 2:ncol(data_100k)){
x = i-1
value = cbind(sum(data_100k[[i]]>=0, na.rm = TRUE),c(colnames(data_100k[i])))
nratings[x,] = value
}
nratings = data.frame(nratings)
nratings$X1 = as.numeric(as.character(nratings$X1))
nratings = as.matrix(nratings)
head(nratings[order(nratings[,1], decreasing = TRUE),], n = 5)
#Same as in exercise 4
preferences = matrix(NA, ncol = 2, nrow = nrow(data_100k))
ratio = matrix(NA, ncol = 2)
for(i in 3:nrow(data_100k)){
x = i-1
ratio = cbind(sum((is.na(data_100k[[i]])==FALSE) & (is.na(data_100k[[2]])==FALSE), na.rm = TRUE)/sum(((is.na(data_100k[[2]])==FALSE))), c(colnames(data_100k[i])))
preferences[x,] = ratio
}
head(preferences[order(preferences[,1], decreasing = TRUE),], n = 5)
#Same as in exercise 5
liked_most = matrix(NA, ncol = 2, nrow = ncol(data_100k))
ratio = matrix(NA, ncol = 2)
new_data = data_100k[data_100k$`Forrest Gump (1994)`>=4,]
new_data = new_data[complete.cases(new_data$`Forrest Gump (1994)`),]
for(i in 2:ncol(data_100k)){
x = i-1
ratio = cbind(mean(new_data[,i], na.rm = TRUE), colnames(new_data[i]))
liked_most[x,] = ratio
}
liked_most = liked_most[liked_most[,1]!="NaN",]
head(liked_most[order(liked_most[,1], decreasing = TRUE),], n = 5)
library(reshape)
library(tidyr)
critics = read.csv("C:/Users/adolf/OneDrive/Documents/IE Business School/2nd Semester/Recommendation Engines/Labs/Data/critics.csv", sep = ",")
#get the mean of each column into a matrix
means_col = matrix(colMeans(critics[-1], na.rm = TRUE))
#get the names of each column
film_col = matrix(colnames(critics[-1]))
#bind them into the same matrix
ratings = cbind(means_col,film_col)
#print top 5
head(ratings[order(ratings[,1], decreasing = TRUE),], n = 5)
#create two matrixes empty for the next for loop
percentages = matrix(NA, ncol = 2, nrow = 20)
value = matrix(NA, ncol = 2)
#for loop to bind into a matrix two columns: first one sum the number of ratings >= 4 and divide them by the total and the name of the movie where you are carrying this operation
for(i in 2:ncol(critics)){
x = i-1
value = cbind(c(sum(critics[[i]]>=4, na.rm = TRUE)/sum(critics[[i]]>0, na.rm = TRUE)),c( colnames(critics[i])))
percentages[x,] = value
}
#print top 5
head(percentages[order(percentages[,1], decreasing = TRUE),], n = 5)
#create two matrixes empty for the next for loop
nratings = matrix(NA, ncol = 2, nrow = 20)
value = matrix(NA, ncol = 2)
#for loop to bind into a matrix two columns: first one sum the total number of ratings and the name of the movie where you are carrying this operation
for(i in 2:ncol(critics)){
x = i-1
value = cbind(sum(critics[[i]]>=0, na.rm = TRUE),c(colnames(critics[i])))
nratings[x,] = value
}
#In this case we need to make it data frame to modify the number of ratings column to make it number type data and the plot the top 5
nratings = data.frame(nratings)
nratings$X1 = as.numeric(as.character(nratings$X1))
str(nratings)
head(nratings[order(nratings[,1], decreasing = TRUE),], n = 5)
#create two matrixes empty for the next for loop
preferences = matrix(NA, ncol = 2, nrow = 20)
ratio = matrix(NA, ncol = 2)
#for loop to bind into a matrix two columns: first one sum the number of ratings that "Star Wars IV: A New Hope" and the other movies coincided and the name of the movie where you are carrying this operation
for(i in 3:nrow(critics)){
x = i-1
ratio = cbind(sum((is.na(critics[[i]])==FALSE) & (is.na(critics[[2]])==FALSE), na.rm = TRUE)/sum(((is.na(critics[[2]])==FALSE))), c(colnames(critics[i])))
preferences[x,] = ratio
}
#print top 5
head(preferences[order(preferences[,1], decreasing = TRUE),], n = 5)
#create two matrixes empty for the next for loop and a new dataset with only the rows where "Babe" ratings are 4 or higher
liked_most = matrix(NA, ncol = 2, nrow = 20)
ratio = matrix(NA, ncol = 2)
new_data = critics[critics[,21]>=4,]
new_data = new_data[complete.cases(new_data[,21]),]
# in this for loop we create a two column matrix: first column with the average rate for each movie and the second with the name of the movie
for(i in 2:ncol(critics)-1){
x = i-1
ratio = cbind(mean(new_data[,i], na.rm = TRUE), colnames(new_data[i]))
liked_most[x,] = ratio
}
# print the top 5
head(liked_most[order(liked_most[,1], decreasing = TRUE),], n = 5)
# Loading the data
movies_100k = read.csv("C:/Users/adolf/OneDrive/Documents/IE Business School/2nd Semester/Recommendation Engines/Labs/Data/ml-latest-small/movies.csv", sep = ",")
ratings_100k = read.csv("C:/Users/adolf/OneDrive/Documents/IE Business School/2nd Semester/Recommendation Engines/Labs/Data/ml-latest-small/ratings.csv", sep = ",")
# Putting both databases together
data_100k = merge(ratings_100k, movies_100k, by.x = 'movieId')
#Erasing columns we dont need due to merge
data_100k$movieId = NULL
data_100k$genres = NULL
data_100k$timestamp = NULL
# We use spread function to give our data the same structure as in past exercises
data_100k = data_100k[-86634,]#repeated rating --> user rates the movie twice
data_100k = spread(data = data_100k, key = title, value = rating)
head(data_100k)
# Same as Exercise 1
means_col_100 = matrix(colMeans(data_100k[-1], na.rm = TRUE))
film_col_100 = matrix(colnames(data_100k[-1]))
ratings_100 = cbind(means_col_100,film_col_100)
head(ratings_100[order(ratings_100[,1], decreasing = TRUE),], n = 5)
# Same as exercise 2
percentages = matrix(NA, ncol = 2, nrow = ncol(data_100k))
value = matrix(NA, ncol = 2)
for(i in 2:ncol(data_100k)){
x = i-1
value = cbind(c(sum(data_100k[,i]>=4, na.rm = TRUE)/sum(data_100k[,i]>0, na.rm = TRUE)),c( colnames(data_100k[i])))
percentages[x,] = value
}
head(percentages[order(percentages[,1], decreasing = TRUE),], n = 5)
# Same as exercise 3
nratings = matrix(NA, ncol = 2, nrow = ncol(data_100k))
value = matrix(NA, ncol = 2)
for(i in 2:ncol(data_100k)){
x = i-1
value = cbind(sum(data_100k[[i]]>=0, na.rm = TRUE),c(colnames(data_100k[i])))
nratings[x,] = value
}
nratings = data.frame(nratings)
nratings$X1 = as.numeric(as.character(nratings$X1))
nratings = as.matrix(nratings)
head(nratings[order(nratings[,1], decreasing = TRUE),], n = 5)
#Same as in exercise 4
preferences = matrix(NA, ncol = 2, nrow = nrow(data_100k))
ratio = matrix(NA, ncol = 2)
for(i in 3:nrow(data_100k)){
x = i-1
ratio = cbind(sum((is.na(data_100k[[i]])==FALSE) & (is.na(data_100k[[2]])==FALSE), na.rm = TRUE)/sum(((is.na(data_100k[[2]])==FALSE))), c(colnames(data_100k[i])))
preferences[x,] = ratio
}
head(preferences[order(preferences[,1], decreasing = TRUE),], n = 5)
#Same as in exercise 5
liked_most = matrix(NA, ncol = 2, nrow = ncol(data_100k))
ratio = matrix(NA, ncol = 2)
new_data = data_100k[data_100k$`Forrest Gump (1994)`>=4,]
new_data = new_data[complete.cases(new_data$`Forrest Gump (1994)`),]
for(i in 2:ncol(data_100k)){
x = i-1
ratio = cbind(mean(new_data[,i], na.rm = TRUE), colnames(new_data[i]))
liked_most[x,] = ratio
}
liked_most = liked_most[liked_most[,1]!="NaN",]
head(liked_most[order(liked_most[,1], decreasing = TRUE),], n = 5)
# library(lattice)
# library(ggplot2)
critics = read.csv("C:/Users/adolf/OneDrive/Documents/IE Business School/2nd Semester/Recommendation Engines/Labs/Data/critics.csv", sep = ",")
# Get the correlation where user == "Victoria" and "Nuria". We make it numeric to do the pearson correlation function and using all the complete observations
y = cor.test(x=matrix(as.numeric(critics[(critics$User=='Victoria'),-1])),y=matrix(as.numeric(critics[(critics$User=='Nuria'),-1])),method = "pearson", use = "pairwise.complete.obs")
#Correlation estimate
y$estimate
#We create function to create correlations just by putting the name of the user
cor_for_critics = function(x,y){
cor.test(as.numeric(critics[(critics$User==x),-1]),y=as.numeric(critics[(critics$User==y),-1]),method = "pearson", use = "pairwise.complete.obs")
}
#We get the different combinations correlations
VN = cor_for_critics("Victoria", "Nuria")
MN = cor_for_critics("Maria", "Nerea")
CJ = cor_for_critics("Chris", "Jim")
#Plotting Victoria and Nuria
ratings1 <- subset(critics, critics$User =="Victoria" | critics$User=="Nuria")
ratings1=t(ratings1)
ratings1 = ratings1[complete.cases(ratings1),]
ratings1= as.data.frame(ratings1)
colnames(ratings1)= c("Victoria","Nuria")
ratings1=ratings1[-1,]
plot.default(ratings1[,"Victoria"], ratings1[,"Nuria"], xlab = "Victoria's rating", ylab = "Nuria's rating", xlim = c(0,5), ylim = c(0,5))
abline(mC1 <- lm(Nuria ~ Victoria, data = ratings1))
#Plotting Maria and Nerea
ratings2 <- subset(critics, critics$User =="Maria" | critics$User=="Nerea")
ratings2=t(ratings2)
ratings2 = ratings2[complete.cases(ratings2),]
ratings2= as.data.frame(ratings2)
colnames(ratings2)= c("Maria","Nerea")
ratings2=ratings2[-1,]
plot.default(ratings2[,"Maria"], ratings2[,"Nerea"], xlab = "Maria's rating", ylab = "Nerea's rating", xlim = c(0,5), ylim = c(0,5))
abline(mC2 <- lm(Nerea ~ Maria , data = ratings2))
#Plotting Chris and Jim
ratings3 <- subset(critics, critics$User =="Chris" | critics$User=="Nerea")
ratings3=t(ratings3)
ratings3 = ratings3[complete.cases(ratings3),]
ratings3= as.data.frame(ratings3)
colnames(ratings3)= c("Chris","Jim")
ratings3=ratings3[-1,]
plot.default(ratings3[,"Chris"], ratings3[,"Jim"], xlab = "Chris's rating", ylab = "Jim's rating", xlim = c(0,5), ylim = c(0,5))
abline(mC3 <- lm(Jim ~ Chris , data = ratings3))
# We create a new dataset called critics_modified with a new column called average
critics_modified = critics
critics_modified$average = NA
# We insert in column average the mean value of the observations of each user
for(i in 1:nrow(critics_modified)){
critics_modified[i,ncol(critics_modified)] = mean(as.matrix(critics_modified[i,-1]), na.rm = TRUE)
}
# We create function that gives you the correlation of "Victoria" with other users that you will input into the function
cor_for_critics_victoria = function(y){
cor.test(as.numeric(critics[(critics$User=="Victoria"),-1]),y=as.numeric(critics[(critics$User==y),-1]),method = "pearson", use = "pairwise.complete.obs")
}
# Create column weights
critics_modified$weights = NA
# Doing a for loop and using the function before we insert the weights (or correlations) of each user into its corresponding row in the column weights
for(i in 1:nrow(critics_modified)){
cor_critics = cor_for_critics_victoria(as.character(critics[i,1]))
critics_modified[i,ncol(critics_modified)] = cor_critics$estimate
}
# We modify each rating of each user by every user and make them the scaled ratings * weights. (Inside of the prediction mathematical function it's the numerator). We do this except for the row number 15 where "Victoria" is allocated
for(i in 1:(nrow(critics_modified))){
for(j in 2:(ncol(critics_modified)-2)){
if(i != 15){
critics_modified[i,j] = (critics_modified[i,j]-critics_modified[i,ncol(critics_modified)-1])*critics_modified[i,ncol(critics_modified)]
}
}
}
# We isolate the average rating of "victoria" and erase its row
average_victoria = critics_modified[15,22]
critics_modified = critics_modified[-15,]
# Create two matrixes that we will use in the next for loop
z = matrix(NA, ncol = 2)
prediction_victoria = matrix(NA, ncol = 2, nrow = (ncol(critics_modified)-3))
# Here we are creating a matrix with two elements: the prediction and the movie to watch. To do this we apply the whole function suming the average rating of victoria plus the sum of all the numerator of all the users for the same movie (calculated previously) and dividing by the total absolute weight. This will be bind and appended into prediction_victoria
for(i in 2:(ncol(critics_modified)-2)){
if(is.na(critics[15,i])==TRUE){
z=cbind(average_victoria+(sum(critics_modified[,i],na.rm = TRUE)/sum(abs(critics_modified$weights), na.rm = TRUE)), colnames(critics_modified[i]))
print(z)
prediction_victoria[i-1,]=z
}
}
# We visualize the first 5 predictions
head(prediction_victoria[order(prediction_victoria[,1], decreasing = TRUE),], n= 5)
similar_victoria = matrix(NA, ncol = 2, nrow = nrow(critics))
z=matrix(NA, ncol = 2, nrow = 1)
for(i in 1:nrow(critics)){
if(i!=15){
cor_critics = cor_for_critics_victoria(as.character(critics[i,1]))
z=cbind(cor_critics$estimate, as.character(critics[i,1]))
similar_victoria[i,] = z
}
}
head(similar_victoria[order(similar_victoria[,1],decreasing = TRUE),], n=5)
# We create a new dataset called critics_modified with a new column called average
critics_modified = critics
critics_modified$average = NA
# We insert in column average the mean value of the observations of each user
for(i in 1:nrow(critics_modified)){
critics_modified[i,ncol(critics_modified)] = mean(as.matrix(critics_modified[i,-1]), na.rm = TRUE)
}
# We create function that gives you the correlation of "Victoria" with other users that you will input into the function
cor_for_critics_victoria = function(y){
cor.test(as.numeric(critics[(critics$User=="Victoria"),-1]),y=as.numeric(critics[(critics$User==y),-1]),method = "pearson", use = "pairwise.complete.obs")
}
# Create column weights
critics_modified$weights = NA
# Doing a for loop and using the function before we insert the weights (or correlations) of each user into its corresponding row in the column weights
for(i in 1:nrow(critics_modified)){
cor_critics = cor_for_critics_victoria(as.character(critics[i,1]))
critics_modified[i,ncol(critics_modified)] = cor_critics$estimate
}
# We modify each rating of each user by every user and make them the scaled ratings * weights. (Inside of the prediction mathematical function it's the numerator). We do this except for the row number 15 where "Victoria" is allocated
for(i in 1:(nrow(critics_modified))){
for(j in 2:(ncol(critics_modified)-2)){
if(i != 15){
critics_modified[i,j] = (critics_modified[i,j]-critics_modified[i,ncol(critics_modified)-1])*critics_modified[i,ncol(critics_modified)]
}
}
}
# We isolate the average rating of "victoria" and erase its row
average_victoria = critics_modified[15,22]
critics_modified = critics_modified[-15,]
# Create two matrixes that we will use in the next for loop
z = matrix(NA, ncol = 2)
prediction_victoria = matrix(NA, ncol = 2, nrow = (ncol(critics_modified)-3))
# Here we are creating a matrix with two elements: the prediction and the movie to watch. To do this we apply the whole function suming the average rating of victoria plus the sum of all the numerator of all the users for the same movie (calculated previously) and dividing by the total absolute weight. This will be bind and appended into prediction_victoria
for(i in 2:(ncol(critics_modified)-2)){
if(is.na(critics[15,i])==TRUE){
z=cbind(average_victoria+(sum(critics_modified[,i],na.rm = TRUE)/sum(abs(critics_modified$weights), na.rm = TRUE)), colnames(critics_modified[i]))
prediction_victoria[i-1,]=z
}
}
# We visualize the first 5 predictions
head(prediction_victoria[order(prediction_victoria[,1], decreasing = TRUE),], n= 5)
