}
Average <- matrix(Average,20,1)
pearsoncorr[15,]
pearsoncorr[1,]
sum(pearsoncorr[1,])-1
sum(pearsoncorr[1,])
tdfn
tdfn[-2]
tdfn[-2,]
tdfn[,]
tdfn[,-2]
tdfn[,-1]
otherRatings = tdfn[,-1]
otherRatings
otherRatings = tdfn[,-1]
otherRatings-Average[-1]
pearsoncorr
pearsoncorr[-1,-1]
pearsoncorr[1]
pearsoncorr[1,]
pearsoncorr[1,-1]
(otherRatings-Average[-1])*pearsoncorr[-1,-1]
(otherRatings-Average[-1])*pearsoncorr[1,-1]
otherRatings = tdfn[,-1]
tdfn[,-1]
tdfn[,-1]
tdfn[1,-1]
tdfn[10,-1]-Average[-1]
tdfn[10,-1]-Average[-1]*pearsoncorr[1,-1]
((tdfn[10,-1]-Average[-1])*pearsoncorr[1,-1])/(sum(pearsoncorr[1,])-1)
sum(((tdfn[10,-1]-Average[-1])*pearsoncorr[1,-1]))/(sum(pearsoncorr[1,])-1)
sum(((tdfn[10,-1]-Average[-1])*pearsoncorr[1,-1]),na.rm = T)/(sum(pearsoncorr[1,])-1,na.rm=T)
sum(((tdfn[10,-1]-Average[-1])*pearsoncorr[1,-1]),na.rm = T)
sum(((tdfn[10,-1]-Average[-1])*pearsoncorr[1,-1]),na.rm = T)/(sum(pearsoncorr[userId,],na.rm=T)-1)
sum(((tdfn[10,-1]-Average[-1])*pearsoncorr[1,-1]),na.rm = T)/(sum(pearsoncorr[1,],na.rm=T)-1)
tdfn[,userId]
tdfn[,1]
tdf[,1]
tdf[]
tdf[1,]
tdf[,1]
test <- list()
test <- c(test, tdf[1,1])
test
test <- list()
test <- c(test, tdf[,1])
test
test <- list()
tdf[,1]
tdf[,1][1]
test <- list()
test <- c(test, tdf[,1][1])
test
test <- list()
test <- c(test, tdf[,1][1])
test <- c(test, tdf[,1][2])
test
sort(test, decreasing = TRUE)
sort(test(1), decreasing = TRUE)
sort(test, decreasing = TRUE)
sort(test)
test <- c()
test <- c(test, tdf[,1][1])
test <- c(test, tdf[,1][2])
test
sort(test)
sort(test, decreasing = TRUE)
tdfn[,userId]
tdfn[,1]
tdf[,1]
tdf[,1](1)
tdf[,1][1,1]
tdf[,1][1]
tdf[,1][1][2]
tdf[,1][1][1]
colName(tdf[,1][1])
getRecommendations = function(userId) {
recommendations <- c()
# Sum Similarity other users
totalSim = sum(pearsoncorr[userId,],na.rm=T)-1
# Movied not rated like prediction
userRatings <- tdfn[,userId]
for (movieId in 1:ncol(userRatings)) {
if (is.na(userRatings[userId, movieId])) {
prediction = sum(((tdfn[movieId,-userId]-Average[-userId])*pearsoncorr[userId,-userId]),na.rm = T)/totalSim
recommendations <- c(recommendations, tdf[,userId][movieId])
}
}
return(recomendations)
}
getRecommendations(1)
# Movied not rated like prediction
userRatings <- tdfn[,userId]
for (movieId in 1:20) {
if (is.na(userRatings[userId, movieId])) {
prediction = sum(((tdfn[movieId,-userId]-Average[-userId])*pearsoncorr[userId,-userId]),na.rm = T)/totalSim
recommendations <- c(recommendations, tdf[,userId][movieId])
}
getRecommendations = function(userId) {
recommendations <- c()
# Sum Similarity other users
totalSim = sum(pearsoncorr[userId,],na.rm=T)-1
# Movied not rated like prediction
userRatings <- tdfn[,userId]
for (movieId in 1:20) {
if (is.na(userRatings[userId, movieId])) {
prediction = sum(((tdfn[movieId,-userId]-Average[-userId])*pearsoncorr[userId,-userId]),na.rm = T)/totalSim
recommendations <- c(recommendations, tdf[,userId][movieId])
}
}
return(recomendations)
}
getRecommendations(1)
colnames(tdf[,1][1])
# Initialization
Import libraries
```{r}
```
Load the critics dataset.
```{r}
critics = read.csv("~/Google\ Drive/Product/IE\ Business\ School/IE\ -\ Master\ 2016/Labs/Lab1/Data/critics.csv")
```
# 1) Pearson correlation coefficient
Calculate the Pearson correlation coefficient between Victoria and Nuria
**Expected correlation between Victoria and Nuria**: 0.3651484
```{r fig.width=7, fig.height=6}
tdf <- t(critics)
colnames(tdf) = tdf[1,]
tdf = tdf[-1,]
tdfn <- matrix(as.numeric(unlist(tdf)),nrow=nrow(tdf))
colnames(tdfn) = colnames(tdf)
df3 <- data.frame(tdfn)
pearsoncorr <- cor(df3[sapply(df3, is.numeric)],use = "pairwise.complete.obs", method= "pearson")
pearsoncorr["Victoria","Nuria"]
```
# 2) Compare two movie critics
Using the calculated Pearson correlation in the previous section. Compare and show the movie ratings for Victoria and Nuria on a scatter plot. How is this compared with the same ratings of Maria and Nerea on a scatter plot? What about Chris and Jim? What it means?
# 3) Top Recommendations
Get the top 5 movies recommended for Victoria. by using a weighted average of every other critic's rankings.
**Expected result**:
>> PYTHON
3.804929227387677, 'The Matrix
3.252404115805032, 'The Shawshank Redemption'
3.0017612913086578, 'Forrest Gump'
2.998776571794391, 'Shakespeare in Love'
2.775452598428216, 'The Sixth Sense'
2.1518724871008903, 'Blade Runner'
1.7964811259693814, 'Saving Private Ryan'
```{r fig.width=7, fig.height=6}
sim_matrix = pearsoncorr[,20] * critics[,2:20]
Average <- c()
for (i in 1:20){
Average[i] <- mean(tdfn[,i],na.rm = T)
}
Average <- matrix(Average,20,1)
test <- c()
test <- c(test, tdf[,1][1])
test <- c(test, tdf[,1][2])
test
colnames(tdf[,1][1])
colname(tdf[,1])
colnames(tdf[,1])
colnames(tdf)
colnames(test)
getRecommendations = function(userId) {
recommendations <- c()
# Sum Similarity other users
totalSim = sum(pearsoncorr[userId,],na.rm=T)-1
# Movied not rated like prediction
userRatings <- tdfn[,userId]
for (movieId in 1:20) {
if (is.na(userRatings[userId, movieId])) {
prediction = sum(((tdfn[movieId,-userId]-Average[-userId])*pearsoncorr[userId,-userId]),na.rm = T)/totalSim
prediction
}
}
return(recomendations)
}
getRecommendations(1)
getRecommendations = function(userId) {
recommendations <- c()
# Sum Similarity other users
totalSim = sum(pearsoncorr[userId,],na.rm=T)-1
# Movied not rated like prediction
userRatings <- tdfn[,userId]
for (movieId in 1:ncol(userRatings)) {
if (is.na(userRatings[userId, movieId])) {
prediction = sum(((tdfn[movieId,-userId]-Average[-userId])*pearsoncorr[userId,-userId]),na.rm = T)/totalSim
prediction
}
}
return(recomendations)
}
getRecommendations(1)
tdfn[,1]
ncol(tdfn[,1])
ncols(tdfn[,1])
ncol(tdfn[,1])
ncol(tdf[,1])
tdf[,1]
tdf[,1][1]
nrows(tdf[,1])
nrow(tdf[,1])
ncol(tdf[,1])
tdf[,1][20]
tdf[,1][19]
tdf[,1][19]
is.na(tdf[,1][19])
sum(((tdfn[19,-1]-Average[-1])*pearsoncorr[1,-1]),na.rm = T)/sum(pearsoncorr[1,],na.rm=T)-1
test <- c()
test <- c(test, tdf[,1][1])
test <- c(test, tdf[,1][2])
test <- c()
test <- c(test, tdf[,1][19],3)
test
test[,1]
test[1]
test[1]=3
test
test <- c()
test <- c(test, tdf[,1][19])
test[1]=3
test
getRecommendations = function(userId) {
predictions <- c()
x = 1;
# Sum Similarity other users
totalSim = sum(pearsoncorr[userId,],na.rm=T)-1
# Movied not rated like prediction
userRatings <-
for (movieId in 1:20) {
movie = tdf[,userId][movieId]
if (is.na(movie)) {
predictionValue = sum(((tdfn[movieId,-userId]-Average[-userId])*pearsoncorr[userId,-userId]),na.rm = T)/totalSim
predictions <- c(predictions, movie)
predictions[x] = predictionValue
x=x+1
}
}
return(recomendations)
getRecommendations = function(userId) {
predictions <- c()
x = 1;
# Sum Similarity other users
totalSim = sum(pearsoncorr[userId,],na.rm=T)-1
# Movied not rated like prediction
userRatings <-
for (movieId in 1:20) {
movie = tdf[,userId][movieId]
if (is.na(movie)) {
predictionValue = sum(((tdfn[movieId,-userId]-Average[-userId])*pearsoncorr[userId,-userId]),na.rm = T)/totalSim
predictions <- c(predictions, movie)
predictions[x] = predictionValue
x=x+1
}
}
return(predictions)
}
getRecommendations(1)
x=1
predictions <- c()
predictionValue = sum(((tdfn[19,-1]-Average[-1])*pearsoncorr[1,-1]),na.rm = T)/sum(pearsoncorr[1,],na.rm=T)-1
predictions <- c(predictions, movie)
predictions[x] = predictionValue
x=x+1
predictions
# Initialization
Import libraries
```{r}
```
Load the critics dataset.
```{r}
critics = read.csv("~/Google\ Drive/Product/IE\ Business\ School/IE\ -\ Master\ 2016/Labs/Lab1/Data/critics.csv")
```
# 1) Pearson correlation coefficient
Calculate the Pearson correlation coefficient between Victoria and Nuria
**Expected correlation between Victoria and Nuria**: 0.3651484
```{r fig.width=7, fig.height=6}
tdf <- t(critics)
colnames(tdf) = tdf[1,]
tdf = tdf[-1,]
tdfn <- matrix(as.numeric(unlist(tdf)),nrow=nrow(tdf))
colnames(tdfn) = colnames(tdf)
df3 <- data.frame(tdfn)
pearsoncorr <- cor(df3[sapply(df3, is.numeric)],use = "pairwise.complete.obs", method= "pearson")
pearsoncorr["Victoria","Nuria"]
```
# 2) Compare two movie critics
Using the calculated Pearson correlation in the previous section. Compare and show the movie ratings for Victoria and Nuria on a scatter plot. How is this compared with the same ratings of Maria and Nerea on a scatter plot? What about Chris and Jim? What it means?
# 3) Top Recommendations
Get the top 5 movies recommended for Victoria. by using a weighted average of every other critic's rankings.
**Expected result**:
>> PYTHON
3.804929227387677, 'The Matrix
3.252404115805032, 'The Shawshank Redemption'
3.0017612913086578, 'Forrest Gump'
2.998776571794391, 'Shakespeare in Love'
2.775452598428216, 'The Sixth Sense'
2.1518724871008903, 'Blade Runner'
1.7964811259693814, 'Saving Private Ryan'
```{r fig.width=7, fig.height=6}
sim_matrix = pearsoncorr[,20] * critics[,2:20]
Average <- c()
for (i in 1:20){
Average[i] <- mean(tdfn[,i],na.rm = T)
}
Average <- matrix(Average,20,1)
x=1
predictions <- c()
predictionValue = sum(((tdfn[19,-1]-Average[-1])*pearsoncorr[1,-1]),na.rm = T)/sum(pearsoncorr[1,],na.rm=T)-1
predictions <- c(predictions, movie)
predictions[x] = predictionValue
x=x+1
predictions
predictions[,x] = predictionValue
predictions <- c()
predictionValue = sum(((tdfn[19,-1]-Average[-1])*pearsoncorr[1,-1]),na.rm = T)/sum(pearsoncorr[1,],na.rm=T)-1
predictions <- c(predictions, tdf[,1][19])
predictions[x] = predictionValue
x=x+1
predictions
Author: Ivan Tarradellas Olmo
========================================================
# Initialization
Import libraries
```{r}
```
Load the critics dataset.
```{r}
critics = read.csv("~/Google\ Drive/Product/IE\ Business\ School/IE\ -\ Master\ 2016/Labs/Lab1/Data/critics.csv")
```
# 1) Pearson correlation coefficient
Calculate the Pearson correlation coefficient between Victoria and Nuria
**Expected correlation between Victoria and Nuria**: 0.3651484
```{r fig.width=7, fig.height=6}
tdf <- t(critics)
colnames(tdf) = tdf[1,]
tdf = tdf[-1,]
tdfn <- matrix(as.numeric(unlist(tdf)),nrow=nrow(tdf))
colnames(tdfn) = colnames(tdf)
df3 <- data.frame(tdfn)
pearsoncorr <- cor(df3[sapply(df3, is.numeric)],use = "pairwise.complete.obs", method= "pearson")
pearsoncorr["Victoria","Nuria"]
```
# 2) Compare two movie critics
Using the calculated Pearson correlation in the previous section. Compare and show the movie ratings for Victoria and Nuria on a scatter plot. How is this compared with the same ratings of Maria and Nerea on a scatter plot? What about Chris and Jim? What it means?
# 3) Top Recommendations
Get the top 5 movies recommended for Victoria. by using a weighted average of every other critic's rankings.
**Expected result**:
>> PYTHON
3.804929227387677, 'The Matrix
3.252404115805032, 'The Shawshank Redemption'
3.0017612913086578, 'Forrest Gump'
2.998776571794391, 'Shakespeare in Love'
2.775452598428216, 'The Sixth Sense'
2.1518724871008903, 'Blade Runner'
1.7964811259693814, 'Saving Private Ryan'
```{r fig.width=7, fig.height=6}
sim_matrix = pearsoncorr[,20] * critics[,2:20]
Average <- c()
for (i in 1:20){
Average[i] <- mean(tdfn[,i],na.rm = T)
}
Average <- matrix(Average,20,1)
x=1
predictions <- c()
predictionValue = sum(((tdfn[19,-1]-Average[-1])*pearsoncorr[1,-1]),na.rm = T)/sum(pearsoncorr[1,],na.rm=T)-1
predictions <- c(predictions, tdf[,1][19])
predictions[x] = predictionValue
x=x+1
predictions
x
getRecommendations = function(userId) {
predictions <- c()
x = 1;
# Sum Similarity other users
totalSim = sum(pearsoncorr[userId,],na.rm=T)-1
# Movied not rated like prediction
userRatings <-
for (movieId in 1:20) {
movie = tdf[,userId][movieId]
if (is.na(movie)) {
predictionValue = sum(((tdfn[movieId,-userId]-Average[-userId])*pearsoncorr[userId,-userId]),na.rm = T)/totalSim
predictions <- c(predictions, movie)
predictions[x] = predictionValue
x=x+1
}
}
return(predictions)
}
predictions = getRecommendations(1)
predictions
sort(predictions,decreasing = TRUE)
tdf[,]
tdf[,15]
predictions = getPredictions(15)
Import libraries
```{r}
```
Load the critics dataset.
```{r}
critics = read.csv("~/Google\ Drive/Product/IE\ Business\ School/IE\ -\ Master\ 2016/Labs/Lab1/Data/critics.csv")
```
# 1) Pearson correlation coefficient
Calculate the Pearson correlation coefficient between Victoria and Nuria
**Expected correlation between Victoria and Nuria**: 0.3651484
```{r fig.width=7, fig.height=6}
tdf <- t(critics)
colnames(tdf) = tdf[1,]
tdf = tdf[-1,]
tdfn <- matrix(as.numeric(unlist(tdf)),nrow=nrow(tdf))
colnames(tdfn) = colnames(tdf)
df3 <- data.frame(tdfn)
pearsoncorr <- cor(df3[sapply(df3, is.numeric)],use = "pairwise.complete.obs", method= "pearson")
pearsoncorr["Victoria","Nuria"]
```
# 2) Compare two movie critics
Using the calculated Pearson correlation in the previous section. Compare and show the movie ratings for Victoria and Nuria on a scatter plot. How is this compared with the same ratings of Maria and Nerea on a scatter plot? What about Chris and Jim? What it means?
# 3) Top Recommendations
Get the top 5 movies recommended for Victoria. by using a weighted average of every other critic's rankings.
**Expected result**:
>> PYTHON
3.804929227387677, 'The Matrix
3.252404115805032, 'The Shawshank Redemption'
3.0017612913086578, 'Forrest Gump'
2.998776571794391, 'Shakespeare in Love'
2.775452598428216, 'The Sixth Sense'
2.1518724871008903, 'Blade Runner'
1.7964811259693814, 'Saving Private Ryan'
```{r fig.width=7, fig.height=6}
sim_matrix = pearsoncorr[,20] * critics[,2:20]
Average <- c()
for (i in 1:20){
Average[i] <- mean(tdfn[,i],na.rm = T)
}
Average <- matrix(Average,20,1)
getPredictions = function(userId) {
predictions <- c()
x = 1;
# Sum Similarity other users
totalSim = sum(pearsoncorr[userId,],na.rm=T)-1
# Movied not rated like prediction
userRatings <-
for (movieId in 1:20) {
movie = tdf[,userId][movieId]
if (is.na(movie)) {
predictionValue = sum(((tdfn[movieId,-userId]-Average[-userId])*pearsoncorr[userId,-userId]),na.rm = T)/totalSim
predictions <- c(predictions, movie)
predictions[x] = predictionValue
x=x+1
}
}
return(predictions)
}
# Return predictions for Victoria
predictions = getPredictions(15)
sort(predictions,decreasing = TRUE)
test <- c()
newTest <- c(test, tdf[,15][1])
newTest[]=-1
newTest
newTest =-1
newTest
test <- c()
newTest <- c(test, tdf[,15][1])
newTest =-2
newTest
test <- c()
newTest <- c(test, tdf[,15][1])
newTest
newTest[] =-2
newTest
test <- c()
newTest <- c(test, tdf[,15][1])
newTest
newTest[] =-2
test <- newTest
test
test <- c()
newTest <- c(test, tdf[,15][1])
newTest
newTest[] =-2
test
test <- c()
newTest <- c(test, tdf[,15][1])
newTest
newTest[] =-2
test <- newTest
test <- newTest
test
test <- c()
newTest <- c(test, tdf[,15][1])
newTest
newTest[] =-2
test <- c(test,newTest)
test <- c(test,newTest)
test
test <- c()
newTest <- c(tdf[,15][1])
newTest
newTest[] =-2
test <- c(test,newTest)
test <- c(test,newTest)
test
if (is.na(movie)) {
value = sum(((tdfn[movieId,-userId]-Average[-userId])*pearsoncorr[userId,-userId]),na.rm = T)/totalSim
newPrediction <- c(movie)
newPrediction[] = value
test <- c(predictions, newPrediction)
sort(predictions,decreasing = TRUE)[1:5]
View(critics)
View(critics)
